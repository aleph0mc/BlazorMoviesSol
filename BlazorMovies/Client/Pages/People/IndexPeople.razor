@page "/people"
@inject IPersonRepository pr
@* Only authorized users can access this component *@
@attribute [Authorize]

<h3>Person</h3>

<div class="form-group">
    <a class="btn btn-info" href="people/create">New Person</a>
</div>

<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage" />

<GenericList List="people">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in people)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="people/edit/@item.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="@(() => DeletePerson(item.Id))">Delete</button>
                        </td>
                        <td>@item.Name</td>
                    </tr>

                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>

@code {
    private List<Person> people;
    private PaginationDTO paginationDTO = new PaginationDTO { RecordsPerPage = 1 };
    private int totalAmountPages;

    private async Task loadPeople()
    {
        var paginatedResponse = await pr.GetPeople(paginationDTO);
        people = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await loadPeople();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }

    private async Task DeletePerson(int id)
    {
        try
        {
            Console.WriteLine($"Deleting Person: {id}");
            await pr.DeletePerson(id);

            await loadPeople();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await loadPeople();
    }
}
