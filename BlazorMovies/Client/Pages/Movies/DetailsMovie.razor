@page "/movies/{MovieId:int}"
@page "/movies/{MovieId:int}/{MovieName}"
@* There's no need of type definition for strings in the route above *@

@inject IMoviesRepository mr

@if (null == model)
{
    <text>Loading...</text>
}
else
{
    <h2>
        @model.Movie.Title (@model.Movie.ReleaseDate.Value.ToString("yyyy"))
    </h2>

    @foreach (var item in model.Genres)
    {
        @if (item == model.Genres.Last())
        {
            @linkGenre(item)
        }
        else
        {
            @linkGenre(item)<text>, </text>
        }
    }

    <text> | </text><span>@model.Movie.ReleaseDate.Value.ToString("dd MM yyyy")</span>

    <div style="display: flex">
        <span style="display: inline-block; margin-right: 5px">
            <img src="@model.Movie.Poster" style="width: 225px; height: 315px" />
            <iframe width="560" height="315"
                    src="https://www.youtube.com/embed/@model.Movie.Trailer"
                    frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen></iframe>
        </span>
    </div>

    <div style="margin-top: 10px;">
        <h3>Summary</h3>
        <div>
            <RenderMarkdown MarkdownContent="@model.Movie.Summary" />
        </div>
    </div>
    <div style="margin-top: 10px;">
        <h3>Actors</h3>
        <div style="display: flex; flex-direction: column">
            @foreach (var actor in model.Actors)
            {
                <div style="margin-bottom: 2px;">
                    <img style="width: 50px;" src="@actor.Picture" />
                    <span style="display:inline-block;width: 200px;"><a href="/person/@actor.Id/@actor.Name.Replace(" ", "-")">@actor.Name</a></span>
                    <span style="display:inline-block; width: 45px;">...</span>
                    <span>@actor.Character</span>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int MovieId { get; set; }
    [Parameter] public string MovieName { get; set; }

    private DetailsMovieDTO model;


    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine($"The Id of the movie is {MovieId}");
        Console.WriteLine($"The Id of the movie is {MovieName}");

        try
        {
            model = await mr.GetMovie(MovieId);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }

    }

    private RenderFragment<Genre> linkGenre = (genre) =>@<a href="movies/search?@genre.Id">@genre.Name</a>;

}
