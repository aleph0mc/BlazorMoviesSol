@inject IJSRuntime js

<input type="checkbox" @bind="displayButton" />

<GenericList List="Movies">
    <ItemTemplate>

        @* As item param we can use the keyword context *@
        @*<IndividualMovie Movie="context" DisplayButton="@displayButton" DeleteMovie="DeleteMovie" />*@

        @* Or we can define the name of the context as attribute for GenericList (see above) *@
        <IndividualMovie Movie="context" DisplayButton="@displayButton" DeleteMovie="DeleteMovieAsync" />

    </ItemTemplate>
</GenericList>

<Confirmation @ref="confirmation" onCancel="onCancel" onConfirm="onConfirm">
    <div>Do you wish to delete @movieToBeDeleted.Title?</div>
</Confirmation>

@code {
    Confirmation confirmation; //Ref to Confirmation component
    Movie movieToBeDeleted;


    public void onConfirm()
    {
        Movies.Remove(movieToBeDeleted);
        confirmation.Hide();
        movieToBeDeleted = null;
    }

    public void onCancel()
    {
        confirmation.Hide();
        movieToBeDeleted = null;
    }

    //The following becomes a parameter for this component
    [Parameter] public List<Movie> Movies { get; set; }

    bool displayButton = false;

    //Delegate method
    private async Task DeleteMovieAsync(Movie movie)
    {
        movieToBeDeleted = movie;
        //Show the dialog for confirmation
        confirmation.Show();

        await js.MyJsFunction("custom message");

        //var confirmed = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {movie.Title}?");

        //var confirmed = await js.Confirm($"Are you sure you want to delete {movie.Title}?");
        //if (confirmed)
        //    Movies.Remove(movie);

    }

    protected override void OnInitialized()
    {
        Console.WriteLine($"OnInitialized. Movies.Count={Movies.Count}");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"OnParametersSet. Movies.Count={Movies.Count}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"OnInitialized. Firstrender={firstRender.ToString()}");
    }

    protected override bool ShouldRender()
    {
        return true; // Here we can define some conditions and return true or false accordingly
    }

    // Public methods can be invoked from another component by reference
    public void TestMethod(string test)
    {
        Console.WriteLine(test);
    }
}
